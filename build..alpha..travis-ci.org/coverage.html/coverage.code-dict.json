{"/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/test.js":"/* istanbul instrument in package npmtest_gulp_wp_theme */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/lib.npmtest_gulp_wp_theme.js":"/* istanbul instrument in package npmtest_gulp_wp_theme */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_wp_theme = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_wp_theme = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-wp-theme && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_wp_theme */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_wp_theme\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_wp_theme.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_wp_theme.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_wp_theme.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_wp_theme.__dirname + '/lib.npmtest_gulp_wp_theme.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/index.js":"'use strict';\n/*\ngulpfile.js\n===========\nRather than manage one giant configuration file responsible\nfor creating multiple tasks, each task has been broken out into\nits own file in gulp/tasks. Any files in that directory get\nautomatically required below.\n\nTo add a new task, simply add a new task file that directory.\ngulp/tasks/default.js specifies the default set of tasks to run\nwhen you run `gulp`.\n*/\n\n//var requireDir = require('require-dir');\n//var gutil = require('gulp-util');\n//var glob = require('glob');\n\n// Require all tasks in gulp/tasks, including subfolders\nmodule.exports = function(gulp, config){\n  // Create final config for this build\n  config = require('./gulp/config')(config);\n\n  require('./gulp/tasks/build')(gulp, config);\n  require('./gulp/tasks/default')(gulp, config);\n  require('./gulp/tasks/browserify')(gulp, config);\n  require('./gulp/tasks/browserSync.js')(gulp, config);\n  require('./gulp/tasks/bump')(gulp, config);\n  require('./gulp/tasks/changelog')(gulp, config);\n  require('./gulp/tasks/copy')(gulp, config);\n  require('./gulp/tasks/images')(gulp, config);\n  require('./gulp/tasks/markup')(gulp, config);\n  require('./gulp/tasks/svg')(gulp, config);\n  require('./gulp/tasks/watch')(gulp, config);\n  require('./gulp/tasks/watchify')(gulp, config);\n  require('./gulp/tasks/styles/stylus')(gulp, config);\n\n  //gutil.log(gulp);\n  return gulp;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulpfile.js":"/*\n  gulpfile.js\n  ===========\n  Rather than manage one giant configuration file responsible\n  for creating multiple tasks, each task has been broken out into\n  its own file in gulp/tasks. Any files in that directory get\n  automatically required below.\n\n  To add a new task, simply add a new task file that directory.\n  gulp/tasks/default.js specifies the default set of tasks to run\n  when you run `gulp`.\n*/\n\nvar gulp = require('gulp');\nrequire('./index')(gulp);\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/config.js":"'use strict';\n\n/**\n * This file checks for different configs and merges them in correct order.\n * There are following configs\n *   - config-development.js: The default config parameters\n *   - config-production.js: Parameters of going live. Minifies and removes debug informations like source maps\n *   - config-user.js: Parameters override the default config-development.js and are for your development\n *                     environment. Don't add this to the repository. It's for you, not your team!\n *\n *  Config overrides: config-production > config-user > config-development\n */\n\nvar args = require('yargs').argv;\nvar _ = require('lodash');\n\nvar defaultConfigDev = require('./config-development');\nvar defaultConfigProd = require('./config-production');\nvar isProductionEnv = args.env === 'production' || args.env === 'prod';\n\nmodule.exports = function(config){\n  var mergedConfig;\n\n  // Create empty configuration container for defaults if no config submitted\n  if(!config){\n    config = {\n      dev: null,\n      prod: null,\n      user: null\n    };\n  }\n\n  // Merge submitted configs where needed with defaults\n  if(config.dev){\n    config.dev = _.merge(defaultConfigDev, config.dev);\n  } else {\n    config.dev = defaultConfigDev;\n  }\n\n  if(config.prod){\n    config.prod = _.merge(defaultConfigProd, config.prod);\n  } else {\n    config.prod = defaultConfigProd;\n  }\n\n  // Create concrete config for compilation\n  // Take Development Config as a base, start with user config\n  var mergedConfig = config.dev;\n  if(config.user) {\n    mergedConfig = _.merge(mergedConfig, config.user);\n  }\n\n  if(isProductionEnv) {\n    mergedConfig = _.merge(mergedConfig, config.user);\n  }\n\n  return mergedConfig;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/config-development.js":"var fs           = require('fs');\nvar packageConfig = require('../package.json');\n\nvar dest = './dist/wp-content/themes/' + packageConfig.name;\nvar src = './src';\n\nvar bower_components = './src/bower_components';\nvar node_modules = './node_modules';\n\nmodule.exports = {\n  options: {\n    version: packageConfig.version\n  },\n  autoprefixer: [\n    'last 2 version',\n    'safari 5',\n    'ie 9',\n    'opera 12.1',\n    'ios 6',\n    'android 4'\n  ],\n  browserSync: {\n    server: {\n      // We're serving the src folder as well\n      // for sass sourcemap linking\n      baseDir: [dest]\n    },\n    open: false,\n    files: [\n      dest + \"/**\",\n      // Exclude Map files\n      \"!\" + dest + \"/**.map\"\n    ]\n  },\n  stylus: {\n    src: src + \"/resources/stylus/**\", // files which are watched for changes, but not compiled directly\n    main: src + \"/resources/stylus/*.{styl, stylus}\", // files which are compiled with all their decendants\n    dest: dest,\n    options: {\n      compress: false,\n      include: [\n        bower_components + '/../', // Shortcut references possible everywhere, e.g. @import 'bower_components/bla'\n        node_modules + '/../'      // Shortcut references possible everywhere, e.g. @import 'node_modules/bla'\n      ]\n    }\n  },\n  images: {\n    src: src + \"/resources/images/**\",\n    dest: dest + \"/resources/images\"\n  },\n  svg: {\n    src: src + \"/resources/svg/**\",\n    dest: dest + \"/resources/svg\"\n  },\n  markup: {\n    src: src + '/templates/**/*.php',\n    dest: dest\n  },\n  copy: {\n    src: [\n      src + '/*.*' // Meta files e.g. Screenshot for WordPress Theme Selector\n    ],\n    dest: dest,\n    options: {\n      base: src // ensure that all copy tasks keep folder structure\n    }\n  },\n  bump: {\n    unreleasedPlaceholder: /## unreleased/ig, // To be replaced in documents with version number\n    prereleaseChangelogs: false, // If true, changelog update with prerelease bump\n    options: {\n      preid : 'beta' // Set the prerelase tag to use\n    }\n  },\n  changelog: {\n    src: './CHANGELOG.md',\n    dest: dest\n  },\n  browserify: {\n    // Enable source maps\n    debug: true,\n    transforms: {\n      uglifyify: false\n    },\n    // Additional file extentions to make optional\n    extensions: ['.coffee', '.hbs'],\n    // A separate bundle will be generated for each\n    // bundle config in the list below\n    bundleConfigs: [{\n      entries: src + '/resources/javascripts/index.js',\n      dest: dest,\n      outputName: 'app.js'\n    }/*, {\n      entries: './src/javascript/head.coffee',\n      dest: dest,\n      outputName: 'head.js'\n    }*/]\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/config-production.js":"var fs   = require('fs');\nvar gutil = require('gulp-util');\nvar packageConfig = require('../package.json');\n\nvar dest = './dist/wp-content/themes/' + packageConfig.name;\nvar src = './src';\n\n// Load base config\nvar prodConfig = require('./config-development');\n\n// Start making changes for production.\n// We recommend to access properties directly as shown below and\n// not assigning whole objects.\nprodConfig.browserify.debug = false;\n\nprodConfig.stylus.options.cache = false;\nprodConfig.stylus.options.compress = true;\nprodConfig.stylus.options.sourcemap = false;\n\nprodConfig.browserify.transforms.uglifyify = true; // minifies module with UglifyJS\n\nmodule.exports = prodConfig;\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/build.js":"'use strict';\n\nmodule.exports = function(gulp){\n  gulp.task('build', ['browserify', 'stylus', 'images', 'svg', 'markup', 'copy', 'changelog']);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/default.js":"'use strict';\n\nmodule.exports = function(gulp) {\n  gulp.task('default', ['build']);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/browserify.js":"'use strict';\n\n/* browserify task\n   ---------------\n   Bundle javascripty things with browserify!\n\n   This task is set up to generate multiple separate bundles, from\n   different sources, and to use Watchify when run from the default task.\n\n   See browserify.bundleConfigs in gulp/config.js\n*/\n\nvar browserify    = require('browserify');\nvar debowerify    = require('debowerify');\nvar browserSync   = require('browser-sync');\nvar watchify      = require('watchify');\nvar replace       = require('gulp-replace');\nvar bundleLogger  = require('../util/bundleLogger');\nvar handleErrors  = require('../util/handleErrors');\nvar source        = require('vinyl-source-stream');\nvar _             = require('lodash');\n//var gutil         = require('gulp-util');\n\nmodule.exports = function(gulp, config){\n  gulp.task('browserify-source', browserifyTask);\n  gulp.task('browserify-version', ['browserify-source'], browserifyVersionTask);\n  gulp.task('browserify', ['browserify-source', 'browserify-version']);\n\n  var bla = browserifyTask;\n\n  // Exporting the task so we can call it directly in our watch task, with the 'devMode' option\n  return browserifyTask;\n\n  function browserifyVersionTask() {\n    var pkg = config.options.version;\n    config.browserify.bundleConfigs.forEach(function(bundleConfig) {\n      gulp.src([bundleConfig.dest + '/' + bundleConfig.outputName])\n        .pipe(replace(/{PKG_VERSION}/g,  pkg.version))\n        .pipe(gulp.dest(bundleConfig.dest))\n        .on('error', handleErrors);\n    });\n  }\n\n  function browserifyTask(callback, devMode) {\n    var bundleQueue = config.browserify.bundleConfigs.length;\n\n    var browserifyThis = function(bundleConfig) {\n      if (devMode) {\n        // Add watchify args and debug (sourcemaps) option\n        _.extend(bundleConfig, watchify.args, {\n          debug: false\n        });\n        // A watchify require/external bug that prevents proper recompiling,\n        // so (for now) we'll ignore these options during development. Running\n        // `gulp browserify` directly will properly require and externalize.\n        bundleConfig = _.omit(bundleConfig, ['external', 'require']);\n      }\n\n      var b = browserify(bundleConfig);\n      b.transform(debowerify);\n\n      if(config.browserify.transforms && config.browserify.transforms.uglifyify){\n        b.transform({\n          global: true\n        }, 'uglifyify');\n      }\n\n      var bundle = function() {\n        // Log when bundling starts\n        bundleLogger.start(bundleConfig.outputName);\n\n        return b\n          .bundle()\n          // Report compile errors\n          .on('error', handleErrors)\n          // Use vinyl-source-stream to make the\n          // stream gulp compatible. Specify the\n          // desired output filename here.\n          .pipe(source(bundleConfig.outputName))\n          // Specify the output destination\n          .pipe(gulp.dest(bundleConfig.dest))\n          .on('end', reportFinished)\n          .pipe(browserSync.reload({\n            stream: true\n          }));\n      };\n\n      if (devMode) {\n        // Wrap with watchify and rebundle on changes\n        b = watchify(b);\n        // Rebundle on update\n        b.on('update', bundle);\n        bundleLogger.watch(bundleConfig.outputName);\n      } else {\n        // Sort out shared dependencies.\n        // b.require exposes modules externally\n        if (bundleConfig.require) b.require(bundleConfig.require);\n        // b.external excludes modules from the bundle, and expects\n        // they'll be available externally\n        if (bundleConfig.external) b.external(bundleConfig.external);\n      }\n\n      var reportFinished = function() {\n        // Log when bundling completes\n        bundleLogger.end(bundleConfig.outputName);\n\n        if (bundleQueue) {\n          bundleQueue--;\n          if (bundleQueue === 0) {\n            // If queue is empty, tell gulp the task is complete.\n            // https://github.com/gulpjs/gulp/blob/master/docs/API.md#accept-a-callback\n            callback();\n          }\n        }\n      };\n\n      return bundle();\n    };\n\n    // Start bundling with Browserify for each bundleConfig specified\n    config.browserify.bundleConfigs.forEach(browserifyThis);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/util/bundleLogger.js":"/* bundleLogger\n   ------------\n   Provides gulp style logs to the bundle method in browserify.js\n*/\n\nvar gutil        = require('gulp-util');\nvar prettyHrtime = require('pretty-hrtime');\nvar startTime;\n\nmodule.exports = {\n  start: function (filepath) {\n    startTime = process.hrtime();\n    gutil.log('Bundling', gutil.colors.green(filepath) + '...');\n  },\n\n  watch: function (bundleName) {\n    gutil.log('Watching files required by', gutil.colors.yellow(bundleName));\n  },\n\n  end: function (filepath) {\n    var taskTime = process.hrtime(startTime);\n    var prettyTime = prettyHrtime(taskTime);\n    gutil.log('Bundled', gutil.colors.green(filepath), 'in', gutil.colors.magenta(prettyTime));\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/util/handleErrors.js":"var notify = require(\"gulp-notify\");\n\nmodule.exports = function() {\n\n\tvar args = Array.prototype.slice.call(arguments);\n\n\t// Send error to notification center with gulp-notify\n\tnotify.onError({\n\t\ttitle: \"Compile Error\",\n\t\tmessage: \"<%= error.message %>\"\n\t}).apply(this, args);\n\n\t// Keep gulp from hanging on this task\n\tthis.emit('end');\n};","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/browserSync.js":"'use strict';\nvar browserSync = require('browser-sync');\n\nmodule.exports = function(gulp, config){\n  gulp.task('browserSync', ['build'], function() {\n    browserSync(config.browserSync);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/bump.js":"'use strict';\n\nvar bump         = require('gulp-bump');\nvar prompt       = require('gulp-prompt');\nvar handleErrors = require('../util/handleErrors');\nvar semver       = require('semver');\nvar replace      = require('gulp-replace');\nvar gutil        = require('gulp-util');\n\nmodule.exports = function(gulp, config){\n  var bumpOptions = config.bump.options;\n  gulp.task('bump', bumpDialogTask);\n\n  function bumpDialogTask(callback) {\n    var target = './*'; // project root\n\n    gulp.src(target).pipe(prompt.prompt({\n      type: 'list',\n      name: 'bump',\n      message: 'What type of bump would you like to do?',\n      choices: ['patch', 'minor', 'major', 'prerelease']\n    }, function(res){\n      var selectedChoice = res.bump;\n      var newVer = semver.inc(config.options.version, selectedChoice);\n\n      if(selectedChoice === 'prerelease'){\n        // Prerelease was chosen\n        // Semver increment current\n        var recommendedVersion = semver.inc(config.options.version, 'pre', bumpOptions.preid);\n        var prereleaseChoices = [\n          'Set a new version'\n        ];\n\n        if(recommendedVersion){\n          // Add recommendation if semver is able to make one\n          prereleaseChoices.unshift(recommendedVersion);\n        }\n\n        gulp.src(target).pipe(prompt.prompt({\n          type: 'list',\n          name: 'prerelease',\n          message: 'What version will it be?',\n          choices: prereleaseChoices\n        }, function(res){\n          if(res.prerelease === 'Set a new version'){\n            // Set explicit prerelease version\n            gulp.src(target).pipe(prompt.prompt({\n              type: 'input',\n              name: 'version',\n              message: 'Set a new version e.g. 1.0.0 (will be automatically suffixed with ' + bumpOptions.preid + ')',\n            }, function(res){\n              newVer = res.version + '-' + bumpOptions.preid + '.0';\n              bumpFiles(newVer, callback, true);\n            }));\n          } else {\n            newVer = recommendedVersion;\n            bumpFiles(newVer, callback, true);\n          }\n        }));\n      } else {\n        bumpFiles(newVer, callback);\n      }\n    }));\n  }\n\n  function bumpFiles(newVer, callback, prerelease){\n    var waitCounter = 0;\n    var date = new Date();\n    var yyyy = date.getFullYear().toString();\n    var mm = (date.getMonth()+1).toString(); // getMonth() is zero-based\n    var dd  = date.getDate().toString();\n    var dateHumanReadable = yyyy + '-' + (mm[1]?mm:\"0\"+mm[0]) + '-' + (dd[1]?dd:\"0\"+dd[0]);\n\n    gulp.src(['./bower.json', './package.json'])\n    .pipe(bump({\n      version: newVer\n    }))\n    .pipe(gulp.dest('./'))\n    .on('error', handleErrors)\n    .on('end', function(){\n      afterBump(waitCounter);\n    });\n\n    gutil.log(prerelease);\n\n    if(!prerelease || (prerelease && config.bump.prereleaseChangelogs)){\n      // replace version in CHANGELOG\n      gulp.src(['./CHANGELOG.md'])\n      .pipe(replace(config.bump.unreleasedPlaceholder, '## v' + newVer + ' - ' + dateHumanReadable))\n      .pipe(gulp.dest('./'))\n      .on('error', handleErrors)\n      .on('end', function(){\n        afterBump(waitCounter);\n      });\n    }\n\n    callback();\n  }\n\n  function afterBump(waitCounter){\n    waitCounter++;\n    if (waitCounter == 2) {\n      gulp.start('build');\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/changelog.js":"'use strict';\n\nvar markdown      = require('gulp-markdown');\nvar handleErrors  = require('../util/handleErrors');\n\nmodule.exports = function(gulp, config){\n  gulp.task('changelog', function() {\n    return gulp.src(config.changelog.src)\n    .pipe(markdown())\n    .pipe(gulp.dest(config.changelog.dest))\n    .on('error', handleErrors);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/copy.js":"'use strict';\nvar handleErrors = require('../util/handleErrors');\n\nmodule.exports = function(gulp, config){\n\tgulp.task('copy-all', function() {\n\t\tvar src = config.copy.src;\n\t\tvar dest = config.copy.dest;\n\t\tvar options = config.copy.options;\n\n\t\treturn gulp.src(src, options)\n\t\t.pipe(gulp.dest(dest))\n\t\t.on('error', handleErrors);\n\t});\n\n\tgulp.task('copy', ['copy-all']);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/images.js":"'use strict';\nvar changed    = require('gulp-changed');\nvar imagemin   = require('gulp-imagemin');\n\nmodule.exports = function(gulp, config){\n  gulp.task('images', function() {\n    return gulp.src(config.images.src)\n      .pipe(changed(config.images.dest)) // Ignore unchanged files\n      .pipe(imagemin()) // Optimize\n      .pipe(gulp.dest(config.images.dest));\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/markup.js":"'use strict';\nvar replace       = require('gulp-replace');\n\nmodule.exports = function(gulp, config){\n  gulp.task('markup', function() {\n    return gulp.src(config.markup.src)\n    .pipe(replace(/{PKG_VERSION}/g, config.options.version))\n    .pipe(gulp.dest(config.markup.dest));\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/svg.js":"'use strict';\nvar changed    = require('gulp-changed');\nvar svgmin = require('gulp-svgmin');\n\nmodule.exports = function(gulp, config){\n  gulp.task('svg', function() {\n    return gulp.src(config.svg.src)\n    .pipe(changed(config.svg.dest)) // Ignore unchanged files\n    .pipe(svgmin()) // Optimize\n    .pipe(gulp.dest(config.svg.dest));\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/watch.js":"'use strict';\n/* Notes:\n   - gulp/tasks/browserify.js handles js recompiling with watchify\n   - gulp/tasks/browserSync.js watches and reloads compiled files\n*/\n\nmodule.exports = function(gulp, config){\n  gulp.task('watch', ['watchify', 'browserSync'], function() {\n    gulp.watch(config.stylus.src, ['stylus']);\n    gulp.watch(config.changelog.src, ['changelog']);\n    gulp.watch(config.images.src, ['images']);\n    gulp.watch(config.svg.src, ['svg']);\n    gulp.watch(config.markup.src, ['markup']);\n    gulp.watch(config.copy.src, ['copy']);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/watchify.js":"'use strict';\nvar browserifyTask = require('./browserify');\n\nmodule.exports = function(gulp){\n  gulp.task('watchify', function(callback) {\n    // Start browserify task with devMode === true\n    browserifyTask(callback, true);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/tasks/styles/stylus.js":"'use strict';\n\nvar plumber       = require('gulp-plumber');\nvar autoprefixer  = require('gulp-autoprefixer');\nvar stylus        = require('gulp-stylus');\nvar replace       = require('gulp-replace');\nvar reload        = require('browser-sync').reload;\nvar handleErrors  = require('../../util/handleErrors');\n\nmodule.exports = function(gulp, config){\n  gulp.task('stylus', function() {\n    // TODO: Move to config\n    var minifyOptions = {\n      prod: {\n        keepSpecialComments: 1\n      }\n    };\n\n    return gulp.src(config.stylus.main)\n    .pipe(plumber())\n    .pipe(stylus(config.stylus.options))\n    .pipe(gulp.dest(config.stylus.dest))\n    .pipe(autoprefixer(config.autoprefixer))\n    //.pipe(gulpif(argv.prod, minifycss(minifyOptions.prod)))\n    //.pipe(sourcemaps.init({loadMaps: true }))\n    //.pipe(sourcemaps.write('.', { includeConent: false,  sourceRoot: '.' }))\n    .pipe(replace(/{PKG_VERSION}/g,  config.options.version))\n    .pipe(gulp.dest(config.stylus.dest))\n    .pipe(reload({\n      stream: true\n    }))\n    .on('error', handleErrors);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/util/files.js":"var path = require('path');\nvar gs = require('glob-stream');\nvar through = require('through2');\n\n// Returns a stream for given globbing scheme\nmodule.exports = function(dir, format) {\n  return gs.create(dir)\n    .pipe(through.obj(function(file, enc, callback) {\n      this.push(format(path.basename(file.path)));\n      callback();\n    }));\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-wp-theme/node_modules/gulp-wp-theme/gulp/util/scriptFilter.js":"var path = require(\"path\");\n\n// Filters out non .coffee and .js files. Prevents\n// accidental inclusion of possible hidden files\nmodule.exports = function(name) {\n    return /(\\.(js|coffee)$)/i.test(path.extname(name));\n};"}